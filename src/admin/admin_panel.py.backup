import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from src.database import get_user, update_user_balance, record_transaction
from src.utils.formatting import format_money, format_user_stats
from src.utils.logger import bot_logger
from dotenv import load_dotenv

load_dotenv()

# Admin user ID from environment variable
ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID", "0"))

async def is_admin(user_id):
    """Check if a user is an admin"""
    return user_id == ADMIN_USER_ID

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /admin command"""
    user_id = update.effective_user.id
    
    if not await is_admin(user_id):
        await update.message.reply_text("❌ You don't have permission to access the admin panel.")
        return
    
    # Show enhanced admin panel
    message = (
        "👑 **ExoWin 👑 Admin Panel** 👑\n\n"
        "🔧 **System Management**\n"
        "Select an option:"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("👥 User Management", callback_data="admin_users"),
            InlineKeyboardButton("📊 Analytics", callback_data="admin_analytics")
        ],
        [
            InlineKeyboardButton("🎮 Game Stats", callback_data="admin_stats"),
            InlineKeyboardButton("💰 Financial", callback_data="admin_financial")
        ],
        [
            InlineKeyboardButton("⚙️ Bot Settings", callback_data="admin_settings"),
            InlineKeyboardButton("🎁 Promotions", callback_data="admin_promos")
        ],
        [
            InlineKeyboardButton("📢 Broadcast", callback_data="admin_broadcast"),
            InlineKeyboardButton("🔧 System", callback_data="admin_system")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /broadcast command for quick broadcasting"""
    user_id = update.effective_user.id
    
    if not await is_admin(user_id):
        await update.message.reply_text("❌ You don't have permission to broadcast messages.")
        return
    
    # Check if message is provided
    if not context.args:
        await update.message.reply_text(
            "📢 **Broadcast Command** 📢\n\n"
            "Usage: `/broadcast <message>`\n\n"
            "Example: `/broadcast Welcome to our new update!`\n\n"
            "This will send the message to all users.",
            parse_mode='Markdown'
        )
        return
    
    # Get the broadcast message
    broadcast_message = ' '.join(context.args)
    
    if len(broadcast_message) < 5:
        await update.message.reply_text("❌ Message too short. Please enter a meaningful message.")
        return
    
    # Confirm broadcast
    message = (
        f"📢 **Confirm Broadcast** 📢\n\n"
        f"**Message to send:**\n{broadcast_message}\n\n"
        f"⚠️ This will be sent to ALL users!\n"
        f"Are you sure you want to proceed?"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("✅ Send Broadcast", callback_data=f"admin_broadcast_confirm"),
            InlineKeyboardButton("❌ Cancel", callback_data="admin_broadcast_cancel")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Store the message in context
    context.user_data["pending_broadcast"] = broadcast_message
    
    await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')

async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle admin panel callback queries"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if not await is_admin(user_id):
        await query.edit_message_text("You don't have permission to access the admin panel.")
        return
    
    data = query.data.split("_")
    
    if len(data) < 2:
        return
    
    section = data[1]
    
    if section == "users":
        # Enhanced User management section
        if len(data) == 2:
            from src.database import get_system_stats
            stats = await get_system_stats()
            
            message = (
                "👥 **User Management** 👥\n\n"
                f"📊 **Quick Stats:**\n"
                f"• Total Users: {stats['total_users']:,}\n"
                f"• Active (7 days): {stats['active_users']:,}\n"
                f"• Banned Users: {stats['banned_users']:,}\n\n"
                "Select an option:"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton("🔍 Search User", callback_data="admin_users_search"),
                    InlineKeyboardButton("📋 All Users", callback_data="admin_users_list")
                ],
                [
                    InlineKeyboardButton("🏆 Top Users", callback_data="admin_users_top"),
                    InlineKeyboardButton("📊 User Analytics", callback_data="admin_users_analytics")
                ],
                [
                    InlineKeyboardButton("💰 Add Balance", callback_data="admin_users_add"),
                    InlineKeyboardButton("🚫 Ban/Unban", callback_data="admin_users_ban")
                ],
                [
                    InlineKeyboardButton("🔙 Back to Main Menu", callback_data="admin_main")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
        
        elif data[2] == "search":
            # Store in context that we're waiting for a user ID
            context.user_data["admin_action"] = "search_user"
            
            message = (
                "🔍 Search User 🔍\n\n"
                "Please send the user ID or username to search."
            )
            
            keyboard = [
                [
                    InlineKeyboardButton("Cancel", callback_data="admin_users")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(message, reply_markup=reply_markup)
        
        elif data[2] == "list":
            # Show all users with pagination
            from src.database import get_all_users
            users, total_count = await get_all_users(limit=10)
            
            message = f"📋 **All Users** (Showing 1-{len(users)} of {total_count:,})\n\n"
            
            for i, user in enumerate(users, 1):
                status = "🚫" if user.get('is_banned') else "✅"
                message += f"{i}. {status} ID: `{user['user_id']}` | Balance: ${user['balance']:.2f}\n"
            
            keyboard = [
                [
                    InlineKeyboardButton("Next Page", callback_data="admin_users_list_1"),
                    InlineKeyboardButton("Refresh", callback_data="admin_users_list")
                ],
                [
                    InlineKeyboardButton("🔙 Back to User Management", callback_data="admin_users")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
        
        elif data[2] == "top":
            # Show top users by balance
            from src.database import get_top_users_by_balance, get_top_users_by_bets
            top_balance = await get_top_users_by_balance(10)
            top_bets = await get_top_users_by_bets(10)
            
            message = "🏆 **Top Users** 🏆\n\n"
            message += "💰 **By Balance:**\n"
            for i, user in enumerate(top_balance, 1):
                message += f"{i}. ID: `{user['user_id']}` - ${user['balance']:.2f}\n"
            
            message += "\n🎮 **By Total Bets:**\n"
            for i, user in enumerate(top_bets, 1):
                message += f"{i}. ID: `{user['user_id']}` - {user['total_bets']} bets\n"
            
            keyboard = [
                [
                    InlineKeyboardButton("🔙 Back to User Management", callback_data="admin_users")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
        
        elif data[2] == "analytics":
            # Show user analytics
            from src.database import get_system_stats
            stats = await get_system_stats()
            balance_stats = stats.get('balance_stats', {})
            
            message = (
                "📊 **User Analytics** 📊\n\n"
                f"👥 **User Statistics:**\n"
                f"• Total Users: {stats['total_users']:,}\n"
                f"• Active (7 days): {stats['active_users']:,}\n"
                f"• Banned Users: {stats['banned_users']:,}\n\n"
                f"💰 **Balance Statistics:**\n"
                f"• Total Balance: ${balance_stats.get('total_balance', 0):,.2f}\n"
                f"• Average Balance: ${balance_stats.get('avg_balance', 0):.2f}\n"
                f"• Highest Balance: ${balance_stats.get('max_balance', 0):,.2f}\n"
                f"• Lowest Balance: ${balance_stats.get('min_balance', 0):.2f}\n\n"
                f"🎮 **Activity:**\n"
                f"• Total Games: {stats['total_games']:,}\n"
                f"• Total Transactions: {stats['total_transactions']:,}\n"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton("🔙 Back to User Management", callback_data="admin_users")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
        
        elif data[2] == "add":
            # Store in context that we're waiting for a user ID and amount
            context.user_data["admin_action"] = "add_balance"
            
            message = (
                "💰 Add Balance 💰\n\n"
                "Please send the user ID and amount in the format:\n"
                "user_id amount\n\n"
                "Example: 123456789 100"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton("Cancel", callback_data="admin_users")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(message, reply_markup=reply_markup)
        
        elif data[2] == "ban":
            # Store in context that we're waiting for a user ID to ban
            context.user_data["admin_action"] = "ban_user"
            
            message = (
                "🚫 Ban User 🚫\n\n"
                "Please send the user ID to ban."
            )
            
            keyboard = [
                [
                    InlineKeyboardButton("Cancel", callback_data="admin_users")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(message, reply_markup=reply_markup)
    
    elif section == "stats":
        # Real game statistics from database
        from src.database import get_game_statistics
        game_stats = await get_game_statistics()
        
        if not game_stats:
            message = (
                "📊 **Game Statistics** 📊\n\n"
                "❌ No game data available yet.\n"
                "Statistics will appear once users start playing games."
            )
        else:
            message = "📊 **Game Statistics** 📊\n\n"
            
            total_games = sum(stat['total_games'] for stat in game_stats)
            total_bet_amount = sum(stat['total_bet_amount'] for stat in game_stats)
            total_winnings = sum(stat['total_winnings'] for stat in game_stats)
            
            message += f"🎮 **Overall Statistics:**\n"
            message += f"• Total Games Played: {total_games:,}\n"
            message += f"• Total Bets: ${total_bet_amount:,.2f}\n"
            message += f"• Total Winnings: ${total_winnings:,.2f}\n"
            message += f"• House Edge: {((total_bet_amount - total_winnings) / total_bet_amount * 100) if total_bet_amount > 0 else 0:.2f}%\n\n"
            
            message += "🎯 **Top Games by Volume:**\n"
            for i, stat in enumerate(game_stats[:5], 1):
                game_name = stat['_id'].replace('_', ' ').title()
                message += f"{i}. {game_name}: {stat['total_games']:,} games (${stat['total_bet_amount']:,.2f})\n"
        
        keyboard = [
            [
                InlineKeyboardButton("📈 Detailed Stats", callback_data="admin_stats_detailed"),
                InlineKeyboardButton("🔄 Refresh", callback_data="admin_stats")
            ],
            [
                InlineKeyboardButton("🔙 Back to Main Menu", callback_data="admin_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    elif section == "analytics":
        # Real analytics from database
        from src.database import get_system_stats, get_game_statistics
        stats = await get_system_stats()
        game_stats = await get_game_statistics()
        balance_stats = stats.get('balance_stats', {})
        
        message = (
            "📊 **System Analytics** 📊\n\n"
            f"👥 **User Metrics:**\n"
            f"• Total Users: {stats['total_users']:,}\n"
            f"• Active Users (7d): {stats['active_users']:,}\n"
            f"• Banned Users: {stats['banned_users']:,}\n"
            f"• Activity Rate: {(stats['active_users'] / max(stats['total_users'], 1) * 100):.1f}%\n\n"
            f"💰 **Financial Metrics:**\n"
            f"• Total Balance: ${balance_stats.get('total_balance', 0):,.2f}\n"
            f"• Average Balance: ${balance_stats.get('avg_balance', 0):.2f}\n"
            f"• Highest Balance: ${balance_stats.get('max_balance', 0):,.2f}\n\n"
            f"🎮 **Gaming Metrics:**\n"
            f"• Total Games: {stats['total_games']:,}\n"
            f"• Total Transactions: {stats['total_transactions']:,}\n"
            f"• Games per User: {(stats['total_games'] / max(stats['total_users'], 1)):.1f}\n"
        )
        
        if game_stats:
            total_bet_amount = sum(stat['total_bet_amount'] for stat in game_stats)
            total_winnings = sum(stat['total_winnings'] for stat in game_stats)
            message += f"• Total Volume: ${total_bet_amount:,.2f}\n"
            message += f"• Total Payouts: ${total_winnings:,.2f}\n"
            message += f"• House Profit: ${total_bet_amount - total_winnings:,.2f}\n"
        
        keyboard = [
            [
                InlineKeyboardButton("🔄 Refresh", callback_data="admin_analytics"),
                InlineKeyboardButton("📊 Export Data", callback_data="admin_export")
            ],
            [
                InlineKeyboardButton("🔙 Back to Main Menu", callback_data="admin_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    elif section == "financial":
        # Real financial statistics using proper database functions
        from src.database.db import get_financial_stats, get_system_stats
        
        stats = await get_system_stats()
        financial_stats = await get_financial_stats()
        balance_stats = stats.get('balance_stats', {})
        
        deposit_data = financial_stats.get('deposits', {})
        withdrawal_data = financial_stats.get('withdrawals', {})
        bonus_data = financial_stats.get('bonuses', {})
        
        message = (
            "💰 **Financial Overview** 💰\n\n"
            f"💳 **Deposits:**\n"
            f"• Total Deposits: ${deposit_data.get('total_deposits', 0):,.2f}\n"
            f"• Number of Deposits: {deposit_data.get('count_deposits', 0):,}\n"
            f"• Average Deposit: ${deposit_data.get('avg_deposit', 0):.2f}\n"
            f"• Largest Deposit: ${deposit_data.get('max_deposit', 0):,.2f}\n\n"
            f"💸 **Withdrawals:**\n"
            f"• Total Withdrawals: ${withdrawal_data.get('total_withdrawals', 0):,.2f}\n"
            f"• Number of Withdrawals: {withdrawal_data.get('count_withdrawals', 0):,}\n"
            f"• Average Withdrawal: ${withdrawal_data.get('avg_withdrawal', 0):.2f}\n"
            f"• Largest Withdrawal: ${withdrawal_data.get('max_withdrawal', 0):,.2f}\n\n"
            f"🎁 **Bonuses:**\n"
            f"• Total Bonuses Paid: ${bonus_data.get('total_bonuses', 0):,.2f}\n"
            f"• Number of Bonuses: {bonus_data.get('count_bonuses', 0):,}\n"
            f"• Average Bonus: ${bonus_data.get('avg_bonus', 0):.2f}\n\n"
            f"📊 **Balance Overview:**\n"
            f"• Total User Balance: ${balance_stats.get('total_balance', 0):,.2f}\n"
            f"• Average User Balance: ${balance_stats.get('avg_balance', 0):.2f}\n"
            f"• Net Flow: ${deposit_data.get('total_deposits', 0) - withdrawal_data.get('total_withdrawals', 0):,.2f}\n"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("📈 Activity Stats", callback_data="admin_financial_activity"),
                InlineKeyboardButton("🔄 Refresh", callback_data="admin_financial")
            ],
            [
                InlineKeyboardButton("🔙 Back to Main Menu", callback_data="admin_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    elif section == "system":
        # System information and controls
        from src.database.db import get_user_activity_stats
        
        activity_stats = await get_user_activity_stats()
        
        message = (
            "🔧 **System Status** 🔧\n\n"
            f"⚡ **Real-time Activity:**\n"
            f"• Active (1 hour): {activity_stats['active_1h']:,}\n"
            f"• Active (24 hours): {activity_stats['active_24h']:,}\n"
            f"• Active (7 days): {activity_stats['active_7d']:,}\n"
            f"• Active (30 days): {activity_stats['active_30d']:,}\n\n"
            f"📊 **Engagement:**\n"
            f"• Avg Games/User: {activity_stats['engagement'].get('avg_games_per_user', 0):.1f}\n"
            f"• Users with Deposits: {activity_stats['engagement'].get('total_users_with_deposits', 0):,}\n"
            f"• Users with Withdrawals: {activity_stats['engagement'].get('total_users_with_withdrawals', 0):,}\n"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("🔄 Refresh", callback_data="admin_system"),
                InlineKeyboardButton("📊 Daily Stats", callback_data="admin_system_daily")
            ],
            [
                InlineKeyboardButton("🔙 Back to Main Menu", callback_data="admin_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    elif section == "broadcast":
        # Broadcast message system
        context.user_data["admin_action"] = "broadcast_message"
        
        message = (
            "📢 **Broadcast Message** 📢\n\n"
            "Send a message to all users.\n\n"
            "⚠️ **Warning:** This will send a message to ALL users!\n\n"
            "Please type your broadcast message:"
        )
        
        keyboard = [
            [InlineKeyboardButton("❌ Cancel", callback_data="admin_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    elif section == "settings":
        # Bot settings section
        message = (
            "⚙️ Bot Settings ⚙️\n\n"
            "Select a setting to modify:"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("Game Odds", callback_data="admin_settings_odds"),
                InlineKeyboardButton("Minimum Bet", callback_data="admin_settings_minbet")
            ],
            [
                InlineKeyboardButton("Maximum Bet", callback_data="admin_settings_maxbet"),
                InlineKeyboardButton("Withdrawal Limit", callback_data="admin_settings_withdraw")
            ],
            [
                InlineKeyboardButton("Back to Main Menu", callback_data="admin_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    
    elif section == "promos":
        # Promotions section
        message = (
            "🎁 Promotions 🎁\n\n"
            "Select an option:"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("Create Promo Code", callback_data="admin_promos_create"),
                InlineKeyboardButton("List Promo Codes", callback_data="admin_promos_list")
            ],
            [
                InlineKeyboardButton("Send Broadcast", callback_data="admin_promos_broadcast"),
                InlineKeyboardButton("Create Bonus", callback_data="admin_promos_bonus")
            ],
            [
                InlineKeyboardButton("Back to Main Menu", callback_data="admin_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    
    elif section == "main":
        # Return to main admin panel
        message = (
            "👑 **ExoWin 👑 Admin Panel** 👑\n\n"
            "🔧 **System Management**\n"
            "Select an option:"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("👥 User Management", callback_data="admin_users"),
                InlineKeyboardButton("📊 Analytics", callback_data="admin_analytics")
            ],
            [
                InlineKeyboardButton("🎮 Game Stats", callback_data="admin_stats"),
                InlineKeyboardButton("💰 Financial", callback_data="admin_financial")
            ],
            [
                InlineKeyboardButton("⚙️ Bot Settings", callback_data="admin_settings"),
                InlineKeyboardButton("🎁 Promotions", callback_data="admin_promos")
            ],
            [
                InlineKeyboardButton("📢 Broadcast", callback_data="admin_broadcast"),
                InlineKeyboardButton("🔧 System", callback_data="admin_system")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    # Handle broadcast confirmations
    elif len(data) >= 3 and data[1] == "broadcast":
        if data[2] == "confirm":
            # Execute broadcast from pending message
            if "pending_broadcast" in context.user_data:
                await execute_broadcast(update, context, context.user_data["pending_broadcast"])
                del context.user_data["pending_broadcast"]
            else:
                await query.edit_message_text("❌ No pending broadcast message found.")
        
        elif data[2] == "cancel":
            # Cancel broadcast
            if "pending_broadcast" in context.user_data:
                del context.user_data["pending_broadcast"]
            
            await query.edit_message_text(
                "❌ **Broadcast Cancelled** ❌\n\n"
                "The broadcast message was not sent.",
                parse_mode='Markdown'
            )

async def admin_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle admin action messages"""
    user_id = update.effective_user.id
    
    if not await is_admin(user_id) or "admin_action" not in context.user_data:
        return False
    
    action = context.user_data["admin_action"]
    
    if action == "search_user":
        # Enhanced user search
        from src.database import search_users, get_user_transactions, get_user_games
        search_term = update.message.text.strip()
        
        users = await search_users(search_term)
        
        if users:
            if len(users) == 1:
                # Single user found - show detailed information
                user = users[0]
                transactions = await get_user_transactions(user['user_id'], 5)
                games = await get_user_games(user['user_id'], 5)
                
                status = "🚫 BANNED" if user.get('is_banned') else "✅ Active"
                
                message = (
                    f"👤 **User Details** 👤\n\n"
                    f"**Basic Info:**\n"
                    f"• ID: `{user['user_id']}`\n"
                    f"• Status: {status}\n"
                    f"• Balance: {format_money(user['balance'])}\n"
                    f"• Created: {user.get('created_at', 'Unknown')}\n"
                    f"• Last Active: {user.get('last_active', 'Unknown')}\n\n"
                    f"**Statistics:**\n"
                    f"• Total Bets: {user.get('total_bets', 0)}\n"
                    f"• Total Wins: {user.get('total_wins', 0)}\n"
                    f"• Total Losses: {user.get('total_losses', 0)}\n"
                    f"• Total Deposits: ${user.get('total_deposits', 0):.2f}\n"
                    f"• Total Withdrawals: ${user.get('total_withdrawals', 0):.2f}\n\n"
                    f"**Recent Activity:**\n"
                    f"• Recent Transactions: {len(transactions)}\n"
                    f"• Recent Games: {len(games)}\n"
                )
                
                ban_text = "Unban User" if user.get('is_banned') else "Ban User"
                keyboard = [
                    [
                        InlineKeyboardButton("💰 Add Balance", callback_data=f"admin_user_addbalance_{user['user_id']}"),
                        InlineKeyboardButton("📊 Full History", callback_data=f"admin_user_history_{user['user_id']}")
                    ],
                    [
                        InlineKeyboardButton(f"🚫 {ban_text}", callback_data=f"admin_user_ban_{user['user_id']}"),
                        InlineKeyboardButton("✏️ Edit User", callback_data=f"admin_user_edit_{user['user_id']}")
                    ],
                    [
                        InlineKeyboardButton("🔙 Back to User Management", callback_data="admin_users")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
            else:
                # Multiple users found - show list
                message = f"🔍 **Search Results** ({len(users)} found)\n\n"
                
                for i, user in enumerate(users[:10], 1):  # Show max 10 results
                    status = "🚫" if user.get('is_banned') else "✅"
                    message += f"{i}. {status} ID: `{user['user_id']}` | Balance: ${user['balance']:.2f}\n"
                
                if len(users) > 10:
                    message += f"\n... and {len(users) - 10} more results"
                
                keyboard = [
                    [
                        InlineKeyboardButton("🔙 Back to User Management", callback_data="admin_users")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(f"❌ No users found matching '{search_term}'")
        
        # Clear the admin action
        del context.user_data["admin_action"]
        return True
    
    elif action == "add_balance":
        # Add balance to a user
        parts = update.message.text.strip().split()
        
        if len(parts) != 2:
            await update.message.reply_text("Invalid format. Please use: user_id amount")
            return True
        
        try:
            target_user_id = int(parts[0])
            amount = float(parts[1])
            
            if amount <= 0:
                await update.message.reply_text("Amount must be positive.")
                return True
            
            user = await get_user(target_user_id)
            
            if user:
                # Add balance to user
                await update_user_balance(target_user_id, amount)
                await record_transaction(target_user_id, amount, "admin_add")
                
                # Get updated user data
                user = await get_user(target_user_id)
                
                message = (
                    f"💰 Balance Added 💰\n\n"
                    f"Added {format_money(amount)} to user {target_user_id}.\n"
                    f"New balance: {format_money(user['balance'])}"
                )
                
                keyboard = [
                    [
                        InlineKeyboardButton("Back to User Management", callback_data="admin_users")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(message, reply_markup=reply_markup)
            else:
                await update.message.reply_text(f"User with ID {target_user_id} not found.")
        except ValueError:
            await update.message.reply_text("Invalid user ID or amount.")
        
        # Clear the admin action
        del context.user_data["admin_action"]
        return True
    
    elif action == "ban_user":
        # Enhanced ban user functionality
        from src.database import ban_user
        try:
            target_user_id = int(update.message.text.strip())
            user = await get_user(target_user_id)
            
            if user:
                # Toggle ban status
                new_ban_status = not user.get('is_banned', False)
                updated_user = await ban_user(target_user_id, new_ban_status)
                
                action_text = "banned" if new_ban_status else "unbanned"
                status_emoji = "🚫" if new_ban_status else "✅"
                
                message = (
                    f"{status_emoji} **User {action_text.title()}** {status_emoji}\n\n"
                    f"User ID: `{target_user_id}`\n"
                    f"Status: {'BANNED' if new_ban_status else 'ACTIVE'}\n"
                    f"Balance: {format_money(updated_user['balance'])}\n\n"
                    f"User has been successfully {action_text}."
                )
                
                keyboard = [
                    [
                        InlineKeyboardButton("🔙 Back to User Management", callback_data="admin_users")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
            else:
                await update.message.reply_text(f"❌ User with ID {target_user_id} not found.")
        except ValueError:
            await update.message.reply_text("❌ Invalid user ID. Please enter a valid number.")
        
        # Clear the admin action
        del context.user_data["admin_action"]
        return True
    
    elif action == "broadcast_message":
        # Broadcast message to all users
        from src.database import get_all_users
        
        broadcast_message = update.message.text.strip()
        
        if len(broadcast_message) < 5:
            await update.message.reply_text("❌ Message too short. Please enter a meaningful message.")
            return True
        
        # Get all users
        all_users, total_count = await get_all_users(limit=10000)  # Get first 10k users
        
        success_count = 0
        failed_count = 0
        
        # Send broadcast message
        for user in all_users:
            try:
                await context.bot.send_message(
                    chat_id=user['user_id'],
                    text=f"📢 **ExoWin 👑 Announcement** 📢\n\n{broadcast_message}",
                    parse_mode='Markdown'
                )
                success_count += 1
            except Exception as e:
                failed_count += 1
                bot_logger.warning(f"Failed to send broadcast to user {user['user_id']}: {e}")
        
        result_message = (
            f"📢 **Broadcast Complete** 📢\n\n"
            f"✅ Successfully sent: {success_count:,}\n"
            f"❌ Failed to send: {failed_count:,}\n"
            f"📊 Total users: {total_count:,}\n\n"
            f"**Message sent:**\n{broadcast_message}"
        )
        
        keyboard = [
            [InlineKeyboardButton("🔙 Back to Main Menu", callback_data="admin_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(result_message, reply_markup=reply_markup, parse_mode='Markdown')
        
        # Clear the admin action
        del context.user_data["admin_action"]
        return True
    
    return False

async def execute_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE, broadcast_message: str):
    """Execute the broadcast to all users"""
    from src.database import get_all_users
    
    # Get all users in batches to avoid memory issues
    batch_size = 1000
    skip = 0
    total_success = 0
    total_failed = 0
    total_users = 0
    
    # Send initial status message
    status_message = await update.callback_query.edit_message_text(
        "📢 **Broadcasting...** 📢\n\n"
        "⏳ Starting broadcast to all users...\n"
        "Please wait...",
        parse_mode='Markdown'
    )
    
    while True:
        # Get batch of users
        users, total_count = await get_all_users(limit=batch_size, skip=skip)
        
        if not users:
            break
        
        total_users = total_count
        batch_success = 0
        batch_failed = 0
        
        # Send to each user in the batch
        for user in users:
            try:
                await context.bot.send_message(
                    chat_id=user['user_id'],
                    text=f"📢 **ExoWin 👑 Announcement** 📢\n\n{broadcast_message}",
                    parse_mode='Markdown'
                )
                batch_success += 1
                total_success += 1
            except Exception as e:
                batch_failed += 1
                total_failed += 1
                bot_logger.warning(f"Failed to send broadcast to user {user['user_id']}: {e}")
        
        # Update progress
        progress = ((skip + len(users)) / total_count) * 100
        try:
            await status_message.edit_text(
                f"📢 **Broadcasting...** 📢\n\n"
                f"📊 Progress: {progress:.1f}%\n"
                f"✅ Sent: {total_success:,}\n"
                f"❌ Failed: {total_failed:,}\n"
                f"📈 Processing batch {skip//batch_size + 1}...",
                parse_mode='Markdown'
            )
        except:
            pass  # Ignore edit errors
        
        skip += batch_size
        
        # Small delay to avoid rate limiting
        import asyncio
        await asyncio.sleep(0.1)
    
    # Final result message
    result_message = (
        f"📢 **Broadcast Complete!** 📢\n\n"
        f"✅ Successfully sent: {total_success:,}\n"
        f"❌ Failed to send: {total_failed:,}\n"
        f"📊 Total users: {total_users:,}\n"
        f"📈 Success rate: {(total_success/max(total_users, 1)*100):.1f}%\n\n"
        f"**Message sent:**\n{broadcast_message}"
    )
    
    keyboard = [
        [InlineKeyboardButton("🔙 Back to Admin Panel", callback_data="admin_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await status_message.edit_text(result_message, reply_markup=reply_markup, parse_mode='Markdown')
    except:
        # If edit fails, send new message
        await update.callback_query.message.reply_text(result_message, reply_markup=reply_markup, parse_mode='Markdown')