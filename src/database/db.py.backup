import os
import motor.motor_asyncio
from dotenv import load_dotenv
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from src.utils.logger import db_logger
from src.utils.error_handler import DatabaseError

load_dotenv()

MONGODB_URI = os.getenv("MONGODB_URI", "mongodb://localhost:27017")
DATABASE_NAME = os.getenv("DATABASE_NAME", "exowin_bot")

if not MONGODB_URI or not DATABASE_NAME:
    raise ValueError("MONGODB_URI and DATABASE_NAME must be set in environment variables")

client = motor.motor_asyncio.AsyncIOMotorClient(MONGODB_URI)
db = client[DATABASE_NAME]
users_collection = db["users"]
transactions_collection = db["transactions"]
games_collection = db["games"]

# User operations
async def get_user(user_id: int) -> Optional[Dict[str, Any]]:
    """Get user from database or create if not exists"""
    try:
        db_logger.debug(f"Getting user {user_id}")
        user = await users_collection.find_one({"user_id": user_id})
        if not user:
            user = {
                "user_id": user_id,
                "balance": 1.0,  # Starting balance of $1
                "created_at": datetime.now(),
                "last_active": datetime.now(),
                "total_bets": 0,
                "total_wins": 0,
                "total_losses": 0,
                "total_deposits": 0,
                "total_withdrawals": 0,
                "is_banned": False,
                # New fields for bonuses and settings
                "daily_bonus_streak": 0,
                "last_daily_bonus": None,
                "total_daily_bonuses": 0.0,
                "total_referrals": 0,
                "total_referral_bonuses": 0.0,
                "total_event_bonuses": 0.0,
                "referred_by": None,
                # Settings
                "notifications_enabled": True,
                "sound_effects": True,
                "theme": "dark",
                "language": "en",
                "auto_bet_enabled": False,
                "quick_bet_enabled": False
            }
            await users_collection.insert_one(user)
            db_logger.info(f"Created new user {user_id}")
        else:
            # Update last active
            await users_collection.update_one(
                {"user_id": user_id},
                {"$set": {"last_active": datetime.now()}}
            )
        return user
    except Exception as e:
        db_logger.error(f"Database error in get_user: {e}")
        raise DatabaseError(f"Failed to get user {user_id}: {e}")

async def update_user_balance(user_id: int, amount: float):
    """Update user balance"""
    await users_collection.update_one(
        {"user_id": user_id},
        {"$inc": {"balance": amount}, "$set": {"last_active": datetime.now()}}
    )
    
    # Update stats based on transaction type
    if amount > 0:
        await users_collection.update_one(
            {"user_id": user_id},
            {"$inc": {"total_wins": 1}}
        )
    elif amount < 0:
        await users_collection.update_one(
            {"user_id": user_id},
            {"$inc": {"total_losses": 1}}
        )
    
    await users_collection.update_one(
        {"user_id": user_id},
        {"$inc": {"total_bets": 1}}
    )
    
    return await get_user(user_id)

async def record_transaction(user_id: int, amount: float, transaction_type: str, game_id: str = None, description: str = None):
    """Record a transaction"""
    transaction = {
        "user_id": user_id,
        "amount": amount,
        "type": transaction_type,  # deposit, withdrawal, bet, win
        "game_id": game_id,
        "description": description,
        "timestamp": datetime.now()
    }
    await transactions_collection.insert_one(transaction)
    
    # Update user stats for deposits and withdrawals
    if transaction_type == "deposit":
        await users_collection.update_one(
            {"user_id": user_id},
            {"$inc": {"total_deposits": amount}}
        )
    elif transaction_type == "withdrawal":
        await users_collection.update_one(
            {"user_id": user_id},
            {"$inc": {"total_withdrawals": amount}}
        )
    
    return transaction

async def record_game(user_id: int, game_type: str, bet_amount: float, outcome: str, winnings: float):
    """Record a game result"""
    game = {
        "user_id": user_id,
        "game_type": game_type,
        "bet_amount": bet_amount,
        "outcome": outcome,
        "winnings": winnings,
        "timestamp": datetime.now()
    }
    result = await games_collection.insert_one(game)
    return str(result.inserted_id)

async def can_withdraw(user_id: int):
    """Check if user can withdraw (balance >= $50)"""
    user = await get_user(user_id)
    return user["balance"] >= 50.0

async def claim_daily_bonus(user_id: int):
    """Claim daily bonus for user"""
    from datetime import datetime, timedelta
    
    user = await get_user(user_id)
    now = datetime.utcnow()
    
    # Check if user can claim daily bonus
    last_bonus = user.get('last_daily_bonus')
    if last_bonus and isinstance(last_bonus, datetime):
        time_since_last = now - last_bonus
        if time_since_last < timedelta(hours=24):
            return False, "Daily bonus already claimed today"
    
    # Calculate bonus amount based on streak
    streak = user.get('daily_bonus_streak', 0)
    base_bonus = 0.50
    streak_bonus = min(streak * 0.10, 2.0)  # Max $2 streak bonus
    total_bonus = base_bonus + streak_bonus
    
    # Update user
    new_streak = streak + 1 if last_bonus and (now - last_bonus) < timedelta(hours=48) else 1
    
    await users_collection.update_one(
        {"user_id": user_id},
        {
            "$inc": {
                "balance": total_bonus,
                "total_daily_bonuses": total_bonus
            },
            "$set": {
                "last_daily_bonus": now,
                "daily_bonus_streak": new_streak
            }
        }
    )
    
    # Record transaction
    await record_transaction(user_id, total_bonus, "bonus", description="Daily bonus")
    
    return True, total_bonus

async def add_referral(referrer_id: int, referred_id: int):
    """Add referral relationship and give bonuses"""
    # Check if referred user already has a referrer
    referred_user = await get_user(referred_id)
    if referred_user.get('referred_by'):
        return False, "User already has a referrer"
    
    # Give bonus to referrer
    referrer_bonus = 2.0
    await users_collection.update_one(
        {"user_id": referrer_id},
        {
            "$inc": {
                "balance": referrer_bonus,
                "total_referrals": 1,
                "total_referral_bonuses": referrer_bonus
            }
        }
    )
    
    # Give bonus to referred user
    referred_bonus = 1.0
    await users_collection.update_one(
        {"user_id": referred_id},
        {
            "$inc": {"balance": referred_bonus},
            "$set": {"referred_by": referrer_id}
        }
    )
    
    # Record transactions
    await record_transaction(referrer_id, referrer_bonus, "bonus", description="Referral bonus")
    await record_transaction(referred_id, referred_bonus, "bonus", description="Welcome referral bonus")
    
    return True, (referrer_bonus, referred_bonus)

async def update_user_settings(user_id: int, settings: dict):
    """Update user settings"""
    await users_collection.update_one(
        {"user_id": user_id},
        {"$set": settings}
    )

# Admin functions
async def get_all_users(limit: int = 50, skip: int = 0, sort_by: str = "created_at", sort_order: int = -1):
    """Get all users with pagination and sorting"""
    cursor = users_collection.find().sort(sort_by, sort_order).skip(skip).limit(limit)
    users = await cursor.to_list(length=limit)
    total_count = await users_collection.count_documents({})
    return users, total_count

async def search_users(search_term: str, limit: int = 20):
    """Search users by user_id or username"""
    try:
        # Try to search by user_id first
        user_id = int(search_term)
        user = await users_collection.find_one({"user_id": user_id})
        return [user] if user else []
    except ValueError:
        # Search by username or other text fields
        regex_pattern = {"$regex": search_term, "$options": "i"}
        cursor = users_collection.find({
            "$or": [
                {"username": regex_pattern},
                {"first_name": regex_pattern},
                {"last_name": regex_pattern}
            ]
        }).limit(limit)
        return await cursor.to_list(length=limit)

async def get_user_transactions(user_id: int, limit: int = 20):
    """Get user transaction history"""
    cursor = transactions_collection.find({"user_id": user_id}).sort("timestamp", -1).limit(limit)
    return await cursor.to_list(length=limit)

async def get_user_games(user_id: int, limit: int = 20):
    """Get user game history"""
    cursor = games_collection.find({"user_id": user_id}).sort("timestamp", -1).limit(limit)
    return await cursor.to_list(length=limit)

async def ban_user(user_id: int, banned: bool = True):
    """Ban or unban a user"""
    await users_collection.update_one(
        {"user_id": user_id},
        {"$set": {"is_banned": banned}}
    )
    return await get_user(user_id)

async def get_top_users_by_balance(limit: int = 10):
    """Get top users by balance"""
    cursor = users_collection.find().sort("balance", -1).limit(limit)
    return await cursor.to_list(length=limit)

async def get_top_users_by_bets(limit: int = 10):
    """Get top users by total bets"""
    cursor = users_collection.find().sort("total_bets", -1).limit(limit)
    return await cursor.to_list(length=limit)

async def get_system_stats():
    """Get system statistics"""
    total_users = await users_collection.count_documents({})
    active_users = await users_collection.count_documents({"last_active": {"$gte": datetime.now() - timedelta(days=7)}})
    banned_users = await users_collection.count_documents({"is_banned": True})
    
    # Aggregate balance statistics
    balance_stats = await users_collection.aggregate([
        {
            "$group": {
                "_id": None,
                "total_balance": {"$sum": "$balance"},
                "avg_balance": {"$avg": "$balance"},
                "max_balance": {"$max": "$balance"},
                "min_balance": {"$min": "$balance"}
            }
        }
    ]).to_list(length=1)
    
    # Game statistics
    total_games = await games_collection.count_documents({})
    total_transactions = await transactions_collection.count_documents({})
    
    return {
        "total_users": total_users,
        "active_users": active_users,
        "banned_users": banned_users,
        "total_games": total_games,
        "total_transactions": total_transactions,
        "balance_stats": balance_stats[0] if balance_stats else {}
    }

async def get_game_statistics():
    """Get game statistics"""
    game_stats = await games_collection.aggregate([
        {
            "$group": {
                "_id": "$game_type",
                "total_games": {"$sum": 1},
                "total_bet_amount": {"$sum": "$bet_amount"},
                "total_winnings": {"$sum": "$winnings"},
                "avg_bet": {"$avg": "$bet_amount"},
                "max_bet": {"$max": "$bet_amount"}
            }
        },
        {"$sort": {"total_games": -1}}
    ]).to_list(length=None)
    
    return game_stats

async def setup_database():
    """Setup database indexes and initial configuration"""
    try:
        # Create indexes for users collection
        await users_collection.create_index("user_id", unique=True)
        await users_collection.create_index("last_active")
        await users_collection.create_index("is_banned")
        await users_collection.create_index("balance")
        await users_collection.create_index("total_bets")
        await users_collection.create_index("created_at")
        
        # Create indexes for transactions collection
        await transactions_collection.create_index("user_id")
        await transactions_collection.create_index("timestamp")
        await transactions_collection.create_index("type")
        await transactions_collection.create_index([("user_id", 1), ("timestamp", -1)])
        
        # Create indexes for games collection
        await games_collection.create_index("user_id")
        await games_collection.create_index("game_type")
        await games_collection.create_index("timestamp")
        await games_collection.create_index([("user_id", 1), ("timestamp", -1)])
        await games_collection.create_index([("game_type", 1), ("timestamp", -1)])
        
        db_logger.info("Database indexes created successfully")
        return True
    except Exception as e:
        db_logger.error(f"Failed to setup database: {e}")
        return False

async def get_financial_stats():
    """Get detailed financial statistics"""
    try:
        # Deposit statistics
        deposit_pipeline = [
            {"$match": {"type": "deposit"}},
            {
                "$group": {
                    "_id": None,
                    "total_deposits": {"$sum": "$amount"},
                    "count_deposits": {"$sum": 1},
                    "avg_deposit": {"$avg": "$amount"},
                    "max_deposit": {"$max": "$amount"},
                    "min_deposit": {"$min": "$amount"}
                }
            }
        ]
        
        # Withdrawal statistics
        withdrawal_pipeline = [
            {"$match": {"type": "withdrawal"}},
            {
                "$group": {
                    "_id": None,
                    "total_withdrawals": {"$sum": {"$abs": "$amount"}},
                    "count_withdrawals": {"$sum": 1},
                    "avg_withdrawal": {"$avg": {"$abs": "$amount"}},
                    "max_withdrawal": {"$max": {"$abs": "$amount"}},
                    "min_withdrawal": {"$min": {"$abs": "$amount"}}
                }
            }
        ]
        
        # Bonus statistics
        bonus_pipeline = [
            {"$match": {"type": "bonus"}},
            {
                "$group": {
                    "_id": None,
                    "total_bonuses": {"$sum": "$amount"},
                    "count_bonuses": {"$sum": 1},
                    "avg_bonus": {"$avg": "$amount"}
                }
            }
        ]
        
        deposit_stats = await transactions_collection.aggregate(deposit_pipeline).to_list(length=1)
        withdrawal_stats = await transactions_collection.aggregate(withdrawal_pipeline).to_list(length=1)
        bonus_stats = await transactions_collection.aggregate(bonus_pipeline).to_list(length=1)
        
        return {
            "deposits": deposit_stats[0] if deposit_stats else {},
            "withdrawals": withdrawal_stats[0] if withdrawal_stats else {},
            "bonuses": bonus_stats[0] if bonus_stats else {}
        }
    except Exception as e:
        db_logger.error(f"Error getting financial stats: {e}")
        return {"deposits": {}, "withdrawals": {}, "bonuses": {}}

async def get_daily_stats(days: int = 7):
    """Get daily statistics for the last N days"""
    try:
        start_date = datetime.now() - timedelta(days=days)
        
        # Daily user registrations
        user_pipeline = [
            {"$match": {"created_at": {"$gte": start_date}}},
            {
                "$group": {
                    "_id": {
                        "year": {"$year": "$created_at"},
                        "month": {"$month": "$created_at"},
                        "day": {"$dayOfMonth": "$created_at"}
                    },
                    "new_users": {"$sum": 1}
                }
            },
            {"$sort": {"_id": 1}}
        ]
        
        # Daily game activity
        game_pipeline = [
            {"$match": {"timestamp": {"$gte": start_date}}},
            {
                "$group": {
                    "_id": {
                        "year": {"$year": "$timestamp"},
                        "month": {"$month": "$timestamp"},
                        "day": {"$dayOfMonth": "$timestamp"}
                    },
                    "games_played": {"$sum": 1},
                    "total_bets": {"$sum": "$bet_amount"},
                    "total_winnings": {"$sum": "$winnings"}
                }
            },
            {"$sort": {"_id": 1}}
        ]
        
        # Daily transactions
        transaction_pipeline = [
            {"$match": {"timestamp": {"$gte": start_date}}},
            {
                "$group": {
                    "_id": {
                        "year": {"$year": "$timestamp"},
                        "month": {"$month": "$timestamp"},
                        "day": {"$dayOfMonth": "$timestamp"},
                        "type": "$type"
                    },
                    "count": {"$sum": 1},
                    "total_amount": {"$sum": "$amount"}
                }
            },
            {"$sort": {"_id": 1}}
        ]
        
        user_stats = await users_collection.aggregate(user_pipeline).to_list(length=None)
        game_stats = await games_collection.aggregate(game_pipeline).to_list(length=None)
        transaction_stats = await transactions_collection.aggregate(transaction_pipeline).to_list(length=None)
        
        return {
            "user_registrations": user_stats,
            "game_activity": game_stats,
            "transactions": transaction_stats
        }
    except Exception as e:
        db_logger.error(f"Error getting daily stats: {e}")
        return {"user_registrations": [], "game_activity": [], "transactions": []}

async def get_user_activity_stats():
    """Get user activity statistics"""
    try:
        now = datetime.now()
        
        # Active users in different time periods
        active_1h = await users_collection.count_documents({"last_active": {"$gte": now - timedelta(hours=1)}})
        active_24h = await users_collection.count_documents({"last_active": {"$gte": now - timedelta(hours=24)}})
        active_7d = await users_collection.count_documents({"last_active": {"$gte": now - timedelta(days=7)}})
        active_30d = await users_collection.count_documents({"last_active": {"$gte": now - timedelta(days=30)}})
        
        # User engagement statistics
        engagement_pipeline = [
            {
                "$group": {
                    "_id": None,
                    "avg_games_per_user": {"$avg": "$total_bets"},
                    "avg_balance": {"$avg": "$balance"},
                    "total_users_with_deposits": {"$sum": {"$cond": [{"$gt": ["$total_deposits", 0]}, 1, 0]}},
                    "total_users_with_withdrawals": {"$sum": {"$cond": [{"$gt": ["$total_withdrawals", 0]}, 1, 0]}}
                }
            }
        ]
        
        engagement_stats = await users_collection.aggregate(engagement_pipeline).to_list(length=1)
        
        return {
            "active_1h": active_1h,
            "active_24h": active_24h,
            "active_7d": active_7d,
            "active_30d": active_30d,
            "engagement": engagement_stats[0] if engagement_stats else {}
        }
    except Exception as e:
        db_logger.error(f"Error getting user activity stats: {e}")
        return {"active_1h": 0, "active_24h": 0, "active_7d": 0, "active_30d": 0, "engagement": {}}